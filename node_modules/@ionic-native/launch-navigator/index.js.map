{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/launch-navigator/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin } from '@ionic-native/core';\r\n\r\nexport interface LaunchNavigatorOptions {\r\n\r\n  /**\r\n   * name of the navigation app to use for directions. Specify using launchnavigator.APP constants. If not specified, defaults to User Selection.\r\n   */\r\n  app?: string;\r\n\r\n  /**\r\n   * nickname to display in app for destination. e.g. \"Bob's House\".\r\n   */\r\n  destinationName?: string;\r\n\r\n  /**\r\n   * Start point of the navigation\r\n   */\r\n  start?: string | number[];\r\n\r\n  /**\r\n   * nickname to display in app for start . e.g. \"My House\".\r\n   */\r\n  startName?: string;\r\n\r\n  /**\r\n   * Transportation mode for navigation: \"driving\", \"walking\" or \"transit\". Defaults to \"driving\" if not specified.\r\n   */\r\n  transportMode?: string;\r\n\r\n  /**\r\n   * If true, debug log output will be generated by the plugin. Defaults to false.\r\n   */\r\n  enableDebug?: boolean;\r\n\r\n  /**\r\n   * a key/value map of extra app-specific parameters. For example, to tell Google Maps on Android to display Satellite view in \"maps\" launch mode: `{\"t\": \"k\"}`\r\n   */\r\n  extras?: any;\r\n\r\n  /**\r\n   * (Android only) mode in which to open Google Maps app: \"maps\" or \"turn-by-turn\". Defaults to \"maps\" if not specified. Specify using launchnavigator.LAUNCH_MODE constants.\r\n   */\r\n  launchMode?: string;\r\n\r\n  /**\r\n   * text to display in the native picker which enables user to select which navigation app to launch. Defaults to \"Select app for navigation\" if not specified.\r\n   */\r\n  appSelectionDialogHeader?: string;\r\n\r\n  /**\r\n   * text to display for the cancel button in the native picker which enables user to select which navigation app to launch. Defaults to \"Cancel\" if not specified.\r\n   */\r\n  appSelectionCancelButton?: string;\r\n\r\n  successCallback?: Function;\r\n\r\n  errorCallback?: Function;\r\n}\r\n\r\n/**\r\n * @name Launch Navigator\r\n * @description\r\n * Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).\r\n *\r\n * @usage\r\n * Please refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.\r\n *\r\n * ```typescript\r\n * import { LaunchNavigator, LaunchNavigatorOptions } from '@ionic-native/launch-navigator';\r\n *\r\n * constructor(private launchNavigator: LaunchNavigator) { }\r\n *\r\n * ...\r\n *\r\n * let options: LaunchNavigatorOptions = {\r\n *   start: 'London, ON',\r\n *   app: LaunchNavigator.APPS.UBER\r\n * };\r\n *\r\n * this.launchNavigator.navigate('Toronto, ON', options)\r\n *   .then(\r\n *     success => console.log('Launched navigator'),\r\n *     error => console.log('Error launching navigator', error)\r\n *   );\r\n * ```\r\n * @interfaces\r\n * LaunchNavigatorOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'LaunchNavigator',\r\n  plugin: 'uk.co.workingedge.phonegap.plugin.launchnavigator',\r\n  pluginRef: 'launchnavigator',\r\n  repo: 'https://github.com/dpa99c/phonegap-launch-navigator',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class LaunchNavigator {\r\n\r\n  /**\r\n   * Launches navigator app\r\n   * @param destination {string|number[]} Location name or coordinates (as string or array)\r\n   * @param options {LaunchNavigatorOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  navigate(\r\n    destination: string | number[],\r\n    options?: LaunchNavigatorOptions\r\n    ): Promise<any> { return; }\r\n\r\n  /**\r\n   * Determines if the given app is installed and available on the current device.\r\n   * @param app {string}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  isAppAvailable(app: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Returns a list indicating which apps are installed and available on the current device.\r\n   * @returns {Promise<string[]>}\r\n   */\r\n  @Cordova()\r\n  availableApps(): Promise<string[]> { return; }\r\n\r\n  /**\r\n   * Returns the display name of the specified app.\r\n   * @param app {string}\r\n   * @returns {string}\r\n   */\r\n  @Cordova({ sync: true })\r\n  getAppDisplayName(app: string): string { return; }\r\n\r\n  /**\r\n   * Returns list of supported apps on a given platform.\r\n   * @param platform {string}\r\n   * @returns {string[]}\r\n   */\r\n  @Cordova({ sync: true })\r\n  getAppsForPlatform(platform: string): string[] { return; }\r\n\r\n  /**\r\n   * Indicates if an app on a given platform supports specification of transport mode.\r\n   * @param app {string} specified as a string, you can use one of the constants, e.g `LaunchNavigator.APP.GOOGLE_MAPS`\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsTransportMode(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * Returns the list of transport modes supported by an app on a given platform.\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {string[]}\r\n   */\r\n  @Cordova({ sync: true })\r\n  getTransportModes(app: string, platform: string): string[] { return; }\r\n\r\n  /**\r\n   * Indicates if an app on a given platform supports specification of launch mode.\r\n   * Note that currently only Google Maps on Android does.\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsLaunchMode(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * Indicates if an app on a given platform supports specification of start location.\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsStart(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsStartName(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsDestName(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * @param destination {string | number[]}\r\n   * @param options {LaunchNavigatorOptions}\r\n   */\r\n  @Cordova({ sync: true })\r\n  userSelect(destination: string | number[], options: LaunchNavigatorOptions): void { }\r\n\r\n  APP: any = {\r\n    USER_SELECT: 'user_select',\r\n    APPLE_MAPS: 'apple_maps',\r\n    GOOGLE_MAPS: 'google_maps',\r\n    WAZE: 'waze',\r\n    CITYMAPPER: 'citymapper',\r\n    NAVIGON: 'navigon',\r\n    TRANSIT_APP: 'transit_app',\r\n    YANDEX: 'yandex',\r\n    UBER: 'uber',\r\n    TOMTOM: 'tomtom',\r\n    BING_MAPS: 'bing_maps',\r\n    SYGIC: 'sygic',\r\n    HERE_MAPS: 'here_maps',\r\n    MOOVIT: 'moovit'\r\n  };\r\n\r\n  TRANSPORT_MODE: any = {\r\n    DRIVING: 'driving',\r\n    WALKING: 'walking',\r\n    BICYCLING: 'bicycling',\r\n    TRANSIT: 'transit'\r\n  };\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}